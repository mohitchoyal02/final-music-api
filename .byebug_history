c
user.save
user
c
n
user
user.errors
c
user.errors
user
c
n
user
user.errors
n
c
JSON.parse(response.body)["data"]
JSON.parse(response.body)[:data]
JSON.parse(response.body)
n
c
UserSerializer.new(user).serializable_hash
UserSerializer.new(user)
response.body.to eq(UserSerializer.new(user))
response.body
n
c
user.errors.full_messages
user.errors
n
c
      expect(JSON.parse(response.body)['success']).to eq(true)
c
      expect(JSON.parse(response.body)['success']).to eq(true)
n
c
JSON.parse(response.body).count("success")
JSON.parse(response.body).count(:success)
JSON.parse(response.body).count
JSON.parse(response.body)
response.body.parse_json
response.body.parse
response.body
response.json
response
n
response
respones
c
response.body.to_h
response.body.key('success')
response.body.includes('success')
response.body
response.body[:data]
response.body[:token]
response.body
response
n
c
user.password == 'mohitchoyal'
user.password == 'mohitchoyal\'
user.password
user
c
FactoryBot.create(:user)
:user
user
n
c
User.allc
user
User.all
params[:username]
params[:user]
user
n
c
User.all
User
User.find_by(username: params[:username])
params[:username]
User.find_by(username: params[:username])
user
n
c
n
user.password
n
params[:password]
n
params
c
params
c
params[:username]
params[:username
params[:password]
params[password]
c
n
response.status
response
n
c
@token
c
n
 c
response
response.status
n
c
subject
user
users
n
c
n
c
params
params[:username]
user.errors
n
c
user.errors
users.errors
params[:password]
user.password
n
c
n
user
n
user
c
@token
n
c
@current_user
params[:id]
playlist
n
c
playlist.save
playlist.vaild?
playlist.songs
n
playlist.save
playlist.valid?
playlist
n
c
playlist.valid?
playlist.songs.length
playlist.songs.count
playlist.songs
playlist.songs << songs
songs
playlist.songs
playlist
Playlist.count
Playlist.all
playlist
n
c
playlist.errors[:songs]
playlist.errors
playlist.valid?
playlist.save
playlist.save4
playlist.songs
n
playlist.songs
playlist
n
c
playlist.save
n
playlist.save
n
playlist
n
c
playlist.save
playlist.songs
n
playlist.songs
playlist
n
c
n
playlist.songs
n
playlist.songs
playlist
n
c
s
n
c
n
c
p.errors[:songs]
p.errors
p.valid?
p.valid>?
p.songs
p
p.save
p.songs
p.songs = songs
p.songs
p
songs.count
songs
songs = Song.where(id: params[:songs])
p.songs
p.songs=params[:songs]
params[:songs]
p.songs
p
p.songs=params[:songs]
p.songs
p = Playlist.new(title: "test", listner_id: 8)
songs = Song.where(id: params[:songs])
params[:songs]
c
playlist
playlist.songs
n
playlist.songs
playlist
n
songs
n
c
n
playlist.songs
playlist.songs<<songs
playlist.songs
playlist
n
songs
n
c
user.save!
c
user.save!
user
c
n
album
n
album
n
c
